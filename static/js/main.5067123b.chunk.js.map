{"version":3,"sources":["api/api.ts","components/PostsList/PostsList.tsx","api/posts.ts","components/NewCommentForm/NewCommentForm.tsx","api/comments.ts","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["BASE_URL","PostsList","userId","selectedPostId","openClosePost","useState","posts","setPosts","errorMess","setErrorMess","useEffect","id","link","fetch","then","resp","ok","json","Promise","reject","Error","status","statusText","catch","err","console","log","getUserPosts","postsFromServ","length","className","map","post","title","type","onClick","NewCommentForm","postId","onNewComment","nameInput","setNameInput","emailInput","setEmailInput","textInput","setTextInput","onSubmit","e","a","preventDefault","comment","name","email","body","method","headers","JSON","stringify","prev","placeholder","value","onChange","event","target","PostDetails","setPost","comments","setComments","showComments","setShowComments","newComment","setNewComment","getPostComments","commentsFromServ","removeComment","commentId","filter","item","state","updatedAt","App","currUser","setCurrUser","setuserId","setSelectedPostId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5067123b.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate.academy/students-api';\n","import React, { useEffect, useState } from 'react';\nimport './PostsList.scss';\nimport { Post } from '../../types/Post';\nimport { getUserPosts } from '../../api/posts';\n\ntype Props = {\n  userId: number;\n  selectedPostId: number;\n  openClosePost: (id: number) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  userId,\n  selectedPostId,\n  openClosePost,\n}) => {\n  const [posts, setPosts] = useState<Post[] | null>(null);\n  const [errorMess, setErrorMess] = useState<string>('');\n\n  useEffect(() => {\n    setErrorMess('');\n    setPosts(null);\n\n    getUserPosts(userId)\n      .then((postsFromServ: Post[]) => (\n        postsFromServ.length > 0\n          ? setPosts(postsFromServ)\n          : setErrorMess(`User #${userId} has no posts`)\n      ));\n  }, [userId]);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      {errorMess.length > 0\n        && <p>{errorMess}</p>}\n\n      <ul className=\"PostsList__list\" data-cy=\"postDetails\">\n        {posts\n          && posts.map(post => (\n            <li\n              key={post.id}\n              className=\"PostsList__item\"\n            >\n              <div>\n                <b>{`[User #${post.userId}]: `}</b>\n                {post.title}\n              </div>\n              <button\n                type=\"button\"\n                className={\n                  selectedPostId !== post.id\n                    ? 'PostsList__button button'\n                    : 'PostsList__button button button--active'\n                }\n                onClick={() => openClosePost(post.id)}\n              >\n                {selectedPostId !== post.id\n                  ? 'Open'\n                  : 'Close'}\n              </button>\n            </li>\n          ))}\n      </ul>\n    </div>\n  );\n};\n","/* eslint-disable no-console */\nimport { BASE_URL } from './api';\n\nexport const getUserPosts = (id: number) => {\n  let link = '';\n\n  if (id === 0) {\n    link = '/posts';\n  } else {\n    link = `/posts?userId=${id}`;\n  }\n\n  return fetch(`${BASE_URL}${link}`)\n    .then(resp => (\n      resp.ok\n        ? resp.json()\n        : Promise.reject(new Error(`${resp.status}: ${resp.statusText}`))\n    ))\n    .catch(err => console.log(err));\n};\n\nexport const getPostDetails = (postId: number) => (\n  fetch(`${BASE_URL}/posts/${postId}`)\n    .then(resp => (\n      resp.ok\n        ? resp.json()\n        : Promise.reject(new Error(`${resp.status}: ${resp.statusText}`))\n    ))\n    .catch(err => console.log(err))\n);\n","/* eslint-disable max-len */\nimport React, { useState } from 'react';\nimport './NewCommentForm.scss';\nimport { addComment } from '../../api/comments';\n\ninterface Props {\n  postId: number;\n  onNewComment: (value: any) => void;\n}\n\nexport const NewCommentForm: React.FC<Props> = ({ postId, onNewComment }) => {\n  const [nameInput, setNameInput] = useState('');\n  const [emailInput, setEmailInput] = useState('');\n  const [textInput, setTextInput] = useState('');\n\n  const handleName = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setNameInput(event.target.value);\n  };\n\n  const handleEmail = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setEmailInput(event.target.value);\n  };\n\n  const handleText = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setTextInput(event.target.value);\n  };\n\n  const onSubmit = async (e: React.ChangeEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    await addComment({\n      postId,\n      name: nameInput,\n      email: emailInput,\n      body: textInput,\n    });\n    setNameInput('');\n    setEmailInput('');\n    setTextInput('');\n    onNewComment((prev: boolean) => !prev);\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={onSubmit}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={nameInput}\n          onChange={handleName}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={emailInput}\n          onChange={handleEmail}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={textInput}\n          onChange={handleText}\n        />\n      </div>\n\n      <button type=\"submit\" className=\"NewCommentForm__submit-button button\">\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","/* eslint-disable no-console */\nimport { BASE_URL } from './api';\n\nexport const getPostComments = (postId: number) => (\n  fetch(`${BASE_URL}/comments?postId=${postId}`)\n    .then(resp => (\n      resp.ok\n        ? resp.json()\n        : Promise.reject(new Error(`${resp.status}: ${resp.statusText}`))\n    ))\n    .catch(err => console.log(err))\n);\n\nexport const deleteComment = (commentId: number) => (\n  fetch(`${BASE_URL}/comments/${commentId}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n  })\n    .then(resp => resp.json())\n    .then(() => console.log(`Comment #${commentId} deleted successfully`))\n    .catch(err => console.log(err))\n);\n\nexport const addComment = (comment: {\n  postId: number,\n  name: string,\n  email: string,\n  body: string,\n}) => (\n  fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify({\n      postId: comment.postId,\n      name: comment.name,\n      email: comment.email,\n      body: comment.body,\n    }),\n  })\n    .then(resp => resp.json())\n    .then(() => console.log('Comment added successfully'))\n    .catch(err => console.log(err))\n);\n","/* eslint-disable max-len */\n/* eslint-disable no-console */\nimport React, { useState, useEffect } from 'react';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { getPostDetails } from '../../api/posts';\nimport { Post } from '../../types/Post';\nimport { Comment } from '../../types/Comment';\nimport { getPostComments, deleteComment } from '../../api/comments';\n\ntype Props = {\n  selectedPostId: number;\n};\n\ntype ForComments = Comment[] | null;\n\nexport const PostDetails: React.FC<Props> = ({ selectedPostId }) => {\n  const [post, setPost] = useState<Post | null>(null);\n  const [comments, setComments] = useState<ForComments>(null);\n  const [showComments, setShowComments] = useState<boolean>(false);\n  const [newComment, setNewComment] = useState<boolean>(false);\n\n  useEffect(() => {\n    setPost(null);\n    setShowComments(true);\n\n    getPostDetails(selectedPostId)\n      .then(postsFromServ => setPost(postsFromServ))\n      .catch((err) => {\n        console.log(`${err}`);\n        setPost(null);\n      });\n\n    getPostComments(selectedPostId)\n      .then((commentsFromServ) => setComments(commentsFromServ))\n      .catch((err) => {\n        console.log(`${err}`);\n      });\n  }, [selectedPostId, newComment]);\n\n  const showHideComments = () => setShowComments(state => !state);\n\n  const removeComment = (id: number) => {\n    deleteComment(id);\n    if (comments) {\n      setComments(comments.filter(item => item.id !== id));\n    }\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      {post && (\n        <>\n          <h2>{`Post #${post.id} details:`}</h2>\n\n          <section className=\"PostDetails__post\">\n            <p>{post.body}</p>\n          </section>\n        </>\n      )}\n\n      <section className=\"PostDetails__comments\">\n        <button\n          type=\"button\"\n          className=\"button PostDetails__show-button\"\n          onClick={showHideComments}\n        >\n          {showComments\n            ? 'Hide comment(-s)'\n            : 'Show comment(-s)'}\n        </button>\n\n        {showComments && comments && (\n          <ul className=\"PostDetails__list\" data-cy=\"postDetails\">\n            {comments.map((comment) => (\n              <li key={comment.id} className=\"PostDetails__list-item\">\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => removeComment(comment.id)}\n                >\n                  X\n                </button>\n                <div className=\"PostDetails__list-item--body\">\n                  <p>{comment.body}</p>\n                  <p>{comment.name}</p>\n                  <p>{comment.updatedAt}</p>\n                </div>\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            postId={selectedPostId}\n            onNewComment={setNewComment}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","/* eslint-disable no-console */\n/* eslint-disable max-len */\nimport React, { useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nconst App: React.FC = () => {\n  const [currUser, setCurrUser] = useState('');\n  const [userId, setuserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  const selectUser = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedPostId(0);\n    setCurrUser(event.target.value);\n    setuserId(+event.target.value);\n  };\n\n  const openClosePost = (postId: number) => (\n    postId !== selectedPostId\n      ? setSelectedPostId(postId)\n      : setSelectedPostId(0)\n  );\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n          <select\n            className=\"App__user-selector\"\n            value={currUser}\n            onChange={selectUser}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            userId={userId}\n            selectedPostId={selectedPostId}\n            openClosePost={openClosePost}\n          />\n        </div>\n\n        {selectedPostId > 0\n          && (\n            <div className=\"App__content\">\n              <PostDetails selectedPostId={selectedPostId} />\n            </div>\n          )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}